#Exercise 3c
#make a Manhattan plot of the -log10(p-values) color coded by chromosome.
#Use the map object provided in the workspace
chrm<- map[gsub("mrk","", colnames(Msub2)), 'Chr']
plot(-log10(pvalmrks), col=chrm)
adjP<- p.adjust(pvalmrks, method='BH')
sigPs<- pvalmrks[which(adjP<0.1)]
sig_thresh<- max(sigPs)
#add the significance threshold to our plot
abline(h=-log10(sig_thresh), col='blue')
adjP<- p.adjust(pvalmrks, method='BH')
sigPs<- pvalmrks[which(adjP<0.01)]
sig_thresh<- max(sigPs)
#add the significance threshold to our plot
abline(h=-log10(sig_thresh), col='blue')
load('Exam 4 Data.RData')
library(rrBLUP)
#Exercise 1a, using mixed.solve, fit a genomic BLUP model to the
#marginal_means data
X<- as.matrix(rep(1, nrow(marginal_means)))
Z<- diag(1, nrow=nrow(marginal_means))
Msub<- M[as.character(marginal_means$phenoGID),]
G<- A.mat(Msub)
gblupmod<- mixed.solve(marginal_means[,2], Z, G, X)
#Exercise 1b, report the additive genetic variance
#in the base population and among the lines
Va_base<- gblupmod$Vu
Va_lines<- Va_base * 2
#Exercise 1c, using your results from 1b, estimate the narrow-sense heritability of the
#trait among the line means
error<- gblupmod$Ve
Va_lines/(Va_lines+ error)
#Exercise 2, calculate the minor allele frequency per marker
#among the set of genotyped lines, plot a histogram of the minor
#allele frequencies, and remove markers with maf< 0.05
#create a function to calculate minor allele frequency of a marker
calcMAF<- function(mrk){
tb<- table(mrk)
n_a<- sum(c(tb['-1']*2, tb['0']*1), na.rm=T) #number of a alleles
n_A<<-sum(c(tb['1']*2, tb['0']*1), na.rm=T) #number of A alleles
fq_a<- n_a/sum(c(n_a, n_A), na.rm=T) #frequency of a alleles
fq_A<- n_A/sum(c(n_A, n_a), na.rm=T) #frequency of A alleles
maf<- min(c(fq_a, fq_A), na.rm=T)
return(maf)
}
#apply this function to the marker matrix
maf<- apply(Msub, 2, calcMAF)
#look at a histogram of the minor allele frequency
hist(maf)
#remove markers with maf< 0.05 from the dataset
Msub2<- Msub[,-which(maf<0.05)]
#Exercise 3a, perform a genome-wide association analysis,
#controlling for population structure only (no family structure),
#use the lm() function to test the significance of each marker. Exclude
#markers with a minor allele frequency less than 0.05.
#hint, anova(mod)$'Pr(>F)' can be used to obtain p-values for each
#factor in the model
pvalmrks<-c()
for(i in 1:ncol(Msub2)){
x<- Msub2[,i]
mod<- lm(marginal_means$emmean ~ 1 + marginal_means$population + x)
pvalmrk<- anova(mod)$'Pr(>F)'[2]
pvalmrks<- append(pvalmrks, pvalmrk)
}
#Exercise 3b
#make a qqPlot of the -log10(p-values) to assess how well
#the -log10(p-values) conform to a uniform distribution
car::qqPlot(-log10(pvalmrks), distribution="unif")
#Exercise 3c
#make a Manhattan plot of the -log10(p-values) color coded by chromosome.
#Use the map object provided in the workspace
chrm<- map[gsub("mrk","", colnames(Msub2)), 'Chr']
plot(-log10(pvalmrks), col=chrm)
#Exercise 3d
#use the Benjamini-hochberg method to estimate the
#significance threshold for a 10% false discovery rate
adjP<- p.adjust(pvalmrks, method='BH')
sigPs<- pvalmrks[which(adjP<0.01)]
sig_thresh<- max(sigPs)
#add the significance threshold to our plot
abline(h=-log10(sig_thresh), col='blue')
which(-log10(pvalmrks)>-log10(sig_thresh))
colnames(Msub2)[which(-log10(pvalmrks)>-log10(sig_thresh))]
sigMrks<- colnames(Msub2)[which(-log10(pvalmrks)>-log10(sig_thresh))]
sigMrks
ls()
trueMrkeffs
trueMrkeffs
sigMrks
#Exercise 3f
names(trueMrkeffs)
names(sigMrks)
#Exercise 3e
#report which markers are considered significantly
#associated with the trait based on the threshold from 3d
sigMrks<- colnames(Msub2)[which(-log10(pvalmrks)>-log10(sig_thresh))]
#associated with the trait based on the threshold from 3d
sigMrks
#Exercise 3f
intersect(names(trueMrkeffs), sigMrks)
sigMrks
#Exercise 3f
#determine the false positive rate
intersect(names(trueMrkeffs), sigMrks)
#Exercise 3f
#determine the false positive rate
sigMrks %in% names(trueMrkeffs)
sigMrks
trueMrkeffs
match(names(trueMrkeffs), colnames(Msub2))
#Exercise 3f
#determine the false negative rate
sigMrks !%in% names(trueMrkeffs)
#Exercise 3f
#determine the false negative rate
sigMrks %in% names(trueMrkeffs)
#Exercise 3f
#determine the false negative rate
names(trueMrkeffs) %in% sigMrks
#Exercise 3f
#determine the false negative rate
length(names(trueMrkeffs) %in% sigMrks )
#Extra credit
#determine the false negative rate based on the number of
#significant markers that overlap
#with the markers with true effects that are segregating
#in the marker data used for the association analysis
match(names(trueMrkeffs), colnames(Msub2))
#Extra credit
#determine the false negative rate based on the number of
#significant markers that overlap
#with the markers with true effects that are segregating
#in the marker data used for the association analysis
na.omit(match(names(trueMrkeffs), colnames(Msub2)))
#Extra credit
#determine the false negative rate based on the number of
#significant markers that overlap
#with the markers with true effects that are segregating
#in the marker data used for the association analysis
colnames(Msub2)[na.omit(match(names(trueMrkeffs), colnames(Msub2)))]
#Extra credit
#determine the false negative rate based on the number of
#significant markers that overlap
#with the markers with true effects that are segregating
#in the marker data used for the association analysis
na.omit(match(names(trueMrkeffs), colnames(Msub2)))
#Extra credit
#determine the false negative rate based on the number of
#significant markers that overlap
#with the markers with true effects that are segregating
#in the marker data used for the association analysis
ix_true<- na.omit(match(names(trueMrkeffs), colnames(Msub2)))
sigMrks
colnames(Msub2)[ix_true]
colnames(Msub2)[ix_true]
length( colnames(Msub2)[ix_true] %in% sigMrks )
colnames(Msub2)[ix_true]
sigMrks
length( colnames(Msub2)[ix_true] %in% sigMrks )
colnames(Msub2)[ix_true] %in% sigMrks
which(colnames(Msub2)[ix_true] %in% sigMrks )
sigMrks
colnames(Msub2)[ix_true]
trueMrks2<- colnames(Msub2)[ix_true]
trueMrks2
sigMrks
trueMrks2 %in% sigMrks
trueMrks2 %in% sigMrks ==FALSE
length(trueMrks2 %in% sigMrks ==FALSE)
length(which(trueMrks2 %in% sigMrks ==FALSE))
length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks)
length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks) *100
FNR< length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks) *100
FNR< length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks) *100
FNR<- length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks) *100
FNR
#Extra credit 2, determine the power of our association analysis
1-FNR
FNR<- length(which(trueMrks2 %in% sigMrks ==FALSE)) / length(sigMrks) *100
#Extra credit 2, determine the power of our association analysis
100-FNR
#Extra credit 2, determine the power of our association analysis
power<- 100-FNR
ls()
load('Exam 4 Data.RData')
ls()
Va_base
load('Exam 4 Data.RData')
library(rrBLUP)
#Exercise 1a, using mixed.solve, fit a genomic BLUP model to the
#marginal_means data
X<- as.matrix(rep(1, nrow(marginal_means)))
Z<- diag(1, nrow=nrow(marginal_means))
Msub<- M[as.character(marginal_means$phenoGID),]
G<- A.mat(Msub)
gblupmod<- mixed.solve(marginal_means[,2], Z, G, X)
#Exercise 1b, report the additive genetic variance
#in the base population and among the lines
Va_base<- gblupmod$Vu
Va_lines<- Va_base * 2
Va_base
Va_lines
sigMrks
minpval<- c()
for(j in 1:1000){
pvalmrks<-c()
for(i in 1:ncol(Msub2)){
x<- Msub2[,i]
mod<- lm(marginal_means$emmean ~ 1 + marginal_means$population + x)
pvalmrk<- anova(mod)$'Pr(>F)'[2]
pvalmrks<- append(pvalmrks, pvalmrk)
}
minpval<- append(minpval, min(pvalmrks))
}
load('Exam 4 Data.RData')
library(rrBLUP)
#Exercise 1a, using mixed.solve, fit a genomic BLUP model to the
#marginal_means data
X<- as.matrix(rep(1, nrow(marginal_means)))
Z<- diag(1, nrow=nrow(marginal_means))
Msub<- M[as.character(marginal_means$phenoGID),]
G<- A.mat(Msub)
gblupmod<- mixed.solve(marginal_means[,2], Z, G, X)
#Exercise 1b, report the additive genetic variance
#in the base population and among the lines
Va_base<- gblupmod$Vu
Va_lines<- Va_base * 2
#Exercise 1c, using your results from 1b, estimate the narrow-sense heritability of the
#trait among the line means
error<- gblupmod$Ve
Va_lines/(Va_lines+ error)
#Exercise 2, calculate the minor allele frequency per marker
#among the set of genotyped lines, plot a histogram of the minor
#allele frequencies, and remove markers with maf< 0.05
#create a function to calculate minor allele frequency of a marker
calcMAF<- function(mrk){
tb<- table(mrk)
n_a<- sum(c(tb['-1']*2, tb['0']*1), na.rm=T) #number of a alleles
n_A<<-sum(c(tb['1']*2, tb['0']*1), na.rm=T) #number of A alleles
fq_a<- n_a/sum(c(n_a, n_A), na.rm=T) #frequency of a alleles
fq_A<- n_A/sum(c(n_A, n_a), na.rm=T) #frequency of A alleles
maf<- min(c(fq_a, fq_A), na.rm=T)
return(maf)
}
#apply this function to the marker matrix
maf<- apply(Msub, 2, calcMAF)
#look at a histogram of the minor allele frequency
hist(maf)
#remove markers with maf< 0.05 from the dataset
Msub2<- Msub[,-which(maf<0.05)]
#Exercise 3a, perform a genome-wide association analysis,
#controlling for population structure only (no family structure),
#use the lm() function to test the significance of each marker. Exclude
#markers with a minor allele frequency less than 0.05.
#hint, anova(mod)$'Pr(>F)' can be used to obtain p-values for each
#factor in the model
pvalmrks<-c()
for(i in 1:ncol(Msub2)){
x<- Msub2[,i]
mod<- lm(marginal_means$emmean ~ 1 + marginal_means$population + x)
pvalmrk<- anova(mod)$'Pr(>F)'[2]
pvalmrks<- append(pvalmrks, pvalmrk)
}
#Exercise 3b
#make a qqPlot of the -log10(p-values) to assess how well
#the -log10(p-values) conform to a uniform distribution
car::qqPlot(-log10(pvalmrks), distribution="unif")
#Exercise 3c
#make a Manhattan plot of the -log10(p-values) color coded by chromosome.
#Use the map object provided in the workspace
chrm<- map[gsub("mrk","", colnames(Msub2)), 'Chr']
plot(-log10(pvalmrks), col=chrm)
#Exercise 3d
#use the Benjamini-hochberg method to estimate the
#significance threshold for a 1% false discovery rate
adjP<- p.adjust(pvalmrks, method='BH')
sigPs<- pvalmrks[which(adjP<0.01)]
sig_thresh<- max(sigPs)
#add the significance threshold to our plot
abline(h=-log10(sig_thresh), col='blue')
minpval<- c()
for(j in 1:1000){
pvalmrks<-c()
for(i in 1:ncol(Msub2)){
x<- Msub2[,i]
y<- marginal_means$emmean
ysamp<- sample(y)
mod<- lm(ysamp ~ 1 + marginal_means$population + x)
pvalmrk<- anova(mod)$'Pr(>F)'[2]
pvalmrks<- append(pvalmrks, pvalmrk)
}
minpval<- append(minpval, min(pvalmrks))
}
j
cat(j, '\n')
minpval<- c()
for(j in 1:1000){
cat(j, '\n')
pvalmrks<-c()
for(i in 1:ncol(Msub2)){
x<- Msub2[,i]
y<- marginal_means$emmean
ysamp<- sample(y)
mod<- lm(ysamp ~ 1 + marginal_means$population + x)
pvalmrk<- anova(mod)$'Pr(>F)'[2]
pvalmrks<- append(pvalmrks, pvalmrk)
}
minpval<- append(minpval, min(pvalmrks))
}
sig_thresh<- sort(minpval)[length(minpval)*0.01]
sig_thresh
#add the significance threshold to our plot
abline(h=-log10(sig_thresh), col='red')
#Exercise 3f
#report which markers are considered significantly
#associated with the trait based on the threshold from 3d
sigMrks<- colnames(Msub2)[which(-log10(pvalmrks)>-log10(sig_thresh))]
sigMrks
hist(minpval)
getwd()
7.5*6
7.5*7
10*12
52.5*126
sqin<- 52.5*126
square_inch<- 52.5*126
square_inch
square_inch
plt_lenIN<- 126
plt_wdthIN<- 52.5
square_inch<- plt_lenIN*plt_wdthIN
square_inch
square_meter<- square_inch*0.00064516
square_meter
126-12
plt_lenIN<- 114
plt_wdthIN<- 52.5
square_inch<- plt_lenIN*plt_wdthIN
square_meter<- square_inch*0.00064516
square_meter
convert_buac_kgHa
library(breedbase)
library(breedbase)convert_buac_kgHa
convert_buac_kgHa
?convert_buac_kgHa
convert_buac_kgHa(1, "wheat")
135/311
175/311
175-40
135/311
(900*1)+(215*1)+(100*2)+(135*2)+(40*2)
(900*1)+(215*1)+(100*2)+(135*2)+(40*2)
Nplot<- (900*1)+(215*1)+(100*2)+(135*2)+(40*2)
Ngeno<- (900*1)+(215*1)+(100*1)+(135*1)+(40*1)
Ngeno
Ngeno/Nplot
Nplot/Ngeno
Nplot
1665/30
1665/45
1665/40
1665/45
1665/36
1665/37
37*20
Nplot
1665/37
47*20
39*4.8
(47*20) * (39*4.8)
((47*20)*(39*4.8))/43560
Nplot
1665/2
832/60
###NEOGA
Nplot<- (215*1)+(100*2)+(135*2)+(40*2)
Nplot
###NEOGA
Nplot<- (215*1)+(100*2)+(135*2)+(40*2)
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
765/2
765/30
765/31
765/25
765/26
765/27
765/28
765/225
765/25
765/2
765/5
153/7
765/15
765/45
47*20
((47*20)*(19*4.8))/43560 #4 acres
47*20)*(19*4.8)
(47*20)*(19*4.8)
((47*20)*(19*4.8))/43560 # acres
###St JACOB
Nplot<- (215*1)+(100*1)+(135*2)+(40*2)
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot/Ngeno
Nplot/Ngeno
Nplot
###St JACOB
Nplot<- (215*1)+(100*1)+(135*2)+(40*2) #665 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot/Ngeno
###St JACOB
Nplot<- (215*1)+(100*1)+(135*1.5)+(40*2) #665 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
Nplot
###St JACOB
Nplot<- (215*1)+(100*1)+(135*1.5)+(40*2) #597 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
###St JACOB
Nplot<- round((215*1)+(100*1)+(135*1.5)+(40*2), 0) #597 plots
Nplot
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
598/30
598/35
598/36
598/20
598/25
598/26
((47*20)*(19*4.8))/43560 # ~2 acres
((28*20)*(25*4.8))/43560 # ~2 acres
Nplot
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.5)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
575/25
((27*20)*(25*4.8))/43560 # ~1.5 acres
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Ngeno
Ngeno
Ngeno
23*25
27*25
675/2
####
Nplot<- round((215*.333)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
####
Nplot<- round((215*.333)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*.333)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
####OTHER OPTION
Nplot<- round((215*.333)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*.333)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
####OTHER OPTION
Nplot<- round((215*.333)+(100*1)+(135*1.331)+(40*2), 0) #431 plots
Nplot
432/20
432/21
432/c(1:30)
18*24
20*26
##########################################################URBANA
Nplot<- (900*1)+(215*1)+(100*2)+(135*2)+(40*2) #1665
Ngeno<- (900*1)+(215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
##########################################################NEOGA
Nplot<- (215*1)+(100*2)+(135*2)+(40*2)
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.33)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.5)+(40*2), 0) #598 plots
Ngeno<- (215*1)+(100*1)+(135*1)+(40*1)
Nplot/Ngeno
Nplot
########################################################St JACOB, BELLEVILLE, St PETER
Nplot<- round((215*1)+(100*1)+(135*1.5)+(40*2), 0) #598 plots
Nplot
load('TrainingSetJul24.2021.RData')
setwd("/Users/jrut/Documents/GitHub/Wheat-Selection-Decisions-2021")
library(ASExtras4)
library(reshape)
load('TrainingSetJul24.2021.RData')
grep('18-14308', All$germplasmName)
All[grep('18-14308', All$germplasmName),'studyName']
All[grep('18-14308', All$germplasmName),]
555*2
6*90
(12*90)
(12*90) + 15
